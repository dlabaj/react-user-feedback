{
    "sourceFile": "packages/module/src/Feedback/FeedbackModalInternal.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1677004600780,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1677004621685,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -184,9 +184,9 @@\n   };\n \n   return (\n     <React.Fragment>\n-      <Modal aria-label=\"Feedback modal\" isOpen={is} className=\"chr-c-feedback-modal\" variant={ModalVariant.large} onClose={handleCloseModal}>\n+      <Modal aria-label=\"Feedback modal\" isOpen={isO} className=\"chr-c-feedback-modal\" variant={ModalVariant.large} onClose={handleCloseModal}>\n         <Grid>\n           <GridItem span={8} rowSpan={12}>\n             <ModalDescription modalPage={modalPage} />\n           </GridItem>\n"
                }
            ],
            "date": 1677004600780,
            "name": "Commit-0",
            "content": "import React, { memo, useState } from 'react';\nimport {\n  Button,\n  Card,\n  CardBody,\n  CardTitle,\n  Grid,\n  GridItem,\n  Modal,\n  ModalVariant,\n  Text,\n  TextContent,\n  TextVariants,\n} from '@patternfly/react-core';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons';\n\nimport feedbackIllo from '../images/feedback_illo.svg';\nimport { FeedbackForm } from './FeedbackForm';\nimport FeedbackSuccess from './FeedbackSuccess';\nimport FeedbackError from './FeedbackError';\nimport { FeedbackModalProps } from './FeedbackModal';\n\nimport './Feedback.scss';\nimport { LocaleContext } from '../context/LocaleContext';\n\n\nexport type FeedbackPages =\n  | 'feedbackHome'\n  | 'feedbackOne'\n  | 'feedbackSuccess'\n  | 'reportBugOne'\n  | 'informDirection'\n  | 'feedbackError'\n  | 'bugReportSuccess'\n  | 'informDirectionSuccess';\n\nexport const FeedbackModalInternal = memo(({ email, isOpen, onShareFeedback, onClose }: FeedbackModalProps) => {\n  const intl = React.useContext(LocaleContext);\n\n  //const [modalOpen, setModalOpen] = useState<boolean>(isOpen);\n  const [modalPage, setModalPage] = useState<FeedbackPages>('feedbackHome');\n  const handleCloseModal = () => {\n    setModalOpen(false);\n    if (onClose) {\n      onClose();\n    }\n  };\n\n  const ModalDescription = ({ modalPage }: { modalPage: FeedbackPages }) => {\n    switch (modalPage) {\n      case 'feedbackHome':\n        return (\n          <div className=\"chr-c-feedback-content\">\n            <TextContent>\n              <Text component={TextVariants.h1}>{intl.tellAboutExperience}</Text>\n              <Text>{intl.helpUsImproveHCC}</Text>\n            </TextContent>\n            <div className=\"chr-c-feedback-cards\">\n              <Card isSelectableRaised isCompact onClick={() => {typeof onShareFeedback === 'string' ? window.open(onShareFeedback, '_blank') :  setModalPage('feedbackOne')}}>\n                <CardTitle className=\"chr-c-feedback-card-title\">{intl.shareFeedback}</CardTitle>\n                <CardBody>{intl.howIsConsoleExperience}</CardBody>\n              </Card>\n              <br />\n              <Card isSelectableRaised isCompact onClick={() => setModalPage('reportBugOne')}>\n                <CardTitle className=\"chr-c-feedback-card-title\">{intl.reportABug}</CardTitle>\n                <CardBody>{intl.describeBugUrgentCases}</CardBody>\n              </Card>\n              <br />\n              <Card\n                isSelectableRaised\n                isCompact\n                onClick={() => {\n                  window.open('https://access.redhat.com/support/cases/#/case/new/open-case?caseCreate=true', '_blank');\n                }}\n              >\n                <CardTitle className=\"chr-c-feedback-card-title\">\n                  <Text>\n                    {intl.openSupportCase} <ExternalLinkAltIcon />\n                  </Text>\n                </CardTitle>\n                <CardBody>{intl.getSupport}</CardBody>\n              </Card>\n              <br />\n              <Card isSelectableRaised isCompact onClick={() => setModalPage('informDirection')}>\n                <CardTitle className=\"chr-c-feedback-card-title\">\n                  <Text>{intl.informRedhatDirection}</Text>\n                </CardTitle>\n                <CardBody>{intl.learnAboutResearchOpportunities}</CardBody>\n              </Card>\n            </div>\n            <Button className=\"chr-c-feedback-button\" ouiaId=\"cancel-feedback\" key=\"cancel\" variant=\"link\" onClick={handleCloseModal}>\n              {intl.cancel}\n            </Button>\n          </div>\n        );\n      case 'feedbackOne':\n        return (\n          <FeedbackForm\n            email={email}\n            onCloseModal={handleCloseModal}\n            onSubmit={() => setModalPage('feedbackSuccess')}\n            onClickBack={() => setModalPage('feedbackHome')}\n            handleFeedbackError={() => setModalPage('feedbackError')}\n            modalTitle={intl.shareYourFeedback}\n            textareaLabel={intl.enterFeedback}\n            feedbackType=\"Feedback\"\n            checkboxDescription={intl.learnAboutResearchOpportunities}\n            submitTitle={intl.submitFeedback}\n          />\n        );\n      case 'reportBugOne':\n        return (\n          <FeedbackForm\n            email={email}\n            onCloseModal={handleCloseModal}\n            onSubmit={() => setModalPage('bugReportSuccess')}\n            onClickBack={() => setModalPage('feedbackHome')}\n            handleFeedbackError={() => setModalPage('feedbackError')}\n            modalTitle={intl.reportABug}\n            modalDescription={\n              <Text>\n                {intl.describeReportBug}{' '}\n                <Text component=\"a\" href=\"https://access.redhat.com/support/cases/#/case/new/open-case?caseCreate=true\" target=\"_blank\">\n                  {intl.openSupportCase} <ExternalLinkAltIcon />\n                </Text>\n              </Text>\n            }\n            feedbackType=\"Bug\"\n            checkboxDescription={`${intl.learnAboutResearchOpportunities} ${intl.weNeverSharePersonalInformation}`}\n            submitTitle={intl.submitFeedback}\n          />\n        );\n      case 'informDirection':\n        return (\n          <FeedbackForm\n            email={email}\n            onCloseModal={handleCloseModal}\n            onSubmit={() => setModalPage('informDirectionSuccess')}\n            onClickBack={() => setModalPage('feedbackHome')}\n            handleFeedbackError={() => setModalPage('feedbackError')}\n            modalTitle={intl.informRedhatDirection}\n            modalDescription={\n              <Text>\n                {intl.informDirectionDescription}\n                <Text component=\"a\" href=\"https://www.redhat.com/en/about/user-research\" target=\"_blank\">\n                  {intl.userResearchTeam}\n                </Text>\n                {intl.directInfluence}\n              </Text>\n            }\n            feedbackType=\"[Research Opportunities]\"\n            textAreaHidden={true}\n            checkboxDescription={intl.weNeverSharePersonalInformation}\n            submitTitle={intl.joinMailingList}\n          />\n        );\n      case 'feedbackSuccess':\n        return (\n          <FeedbackSuccess\n            successTitle={intl.feedbackSent}\n            successDescription={intl.thankYouForFeedback}\n            onCloseModal={handleCloseModal}\n          />\n        );\n      case 'bugReportSuccess':\n        return (\n          <FeedbackSuccess\n            successTitle={intl.bugReported}\n            successDescription={intl.teamWillReviewBug}\n            onCloseModal={handleCloseModal}\n          />\n        );\n      case 'informDirectionSuccess':\n        return (\n          <FeedbackSuccess\n            successTitle={intl.responseSent}\n            successDescription={intl.thankYouForInterest}\n            onCloseModal={handleCloseModal}\n          />\n        );\n      case 'feedbackError':\n        return <FeedbackError onCloseModal={handleCloseModal} />;\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <Modal aria-label=\"Feedback modal\" isOpen={modalOpen} className=\"chr-c-feedback-modal\" variant={ModalVariant.large} onClose={handleCloseModal}>\n        <Grid>\n          <GridItem span={8} rowSpan={12}>\n            <ModalDescription modalPage={modalPage} />\n          </GridItem>\n          <GridItem span={4} className=\"chr-c-feedback-image\">\n            <img alt=\"feedback illustration\" src={feedbackIllo} />\n          </GridItem>\n        </Grid>\n      </Modal>\n    </React.Fragment>\n  );\n});\n\nFeedbackModalInternal.displayName = 'FeedbackModal';\n\nexport default FeedbackModalInternal;\n"
        }
    ]
}